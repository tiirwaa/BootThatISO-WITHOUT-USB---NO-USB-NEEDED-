name: Build, package and attach to Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to target when running manually'
        required: true
        default: 'v1.0.0'

jobs:
  build-package-and-upload:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Resolve target release (by event or manual input)
        id: resolve-release
        uses: actions/github-script@v6
        with:
          script: |
            if (context.eventName === 'release') {
              core.setOutput('release_id', context.payload.release.id)
              core.setOutput('tag', context.payload.release.tag_name)
              core.setOutput('upload_url', context.payload.release.upload_url)
              console.log(`Target release (event): ${context.payload.release.tag_name} (id=${context.payload.release.id})`)
            } else {
              const tag = core.getInput('tag') || 'v1.0.0'
              const { data: rel } = await github.rest.repos.getReleaseByTag({ owner: context.repo.owner, repo: context.repo.repo, tag })
              core.setOutput('release_id', rel.id)
              core.setOutput('tag', tag)
              core.setOutput('upload_url', rel.upload_url)
              console.log(`Target release (manual): ${tag} (id=${rel.id})`)
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release-assets directory
        run: New-Item -ItemType Directory -Path release-assets -Force
        shell: powershell

      - name: Configure and build (CMake + MSBuild)
        run: |
          Write-Host "Configuring CMake and building Release..."
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
        shell: powershell

      - name: Locate built exe
        id: find-exe
        run: |
          $exe = Get-ChildItem -Path build -Filter 'BootThatISO*.exe' -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
          if ([string]::IsNullOrEmpty($exe)) {
            # fallback: try to find any exe in build/**/Release
            $exe = Get-ChildItem -Path build -Filter '*.exe' -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.FullName -match '\\Release\\' } | Select-Object -First 1 -ExpandProperty FullName
          }
          if (-not [string]::IsNullOrEmpty($exe)) {
            Write-Host "Found exe: $exe"
            Write-Output "exe_path=$exe" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            Write-Host "No exe found in build folder. Will package only 'lang' folder."
            Write-Output "exe_path=" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
        shell: powershell

      - name: Remove existing asset with same name (if any)
        uses: actions/github-script@v6
        with:
          script: |
            const releaseId = process.env.RELEASE_ID
            const assetName = 'BootThatISO!.exe'
            const owner = context.repo.owner
            const repo = context.repo.repo
            if (!releaseId) throw new Error('RELEASE_ID is not set')
            const { data: assets } = await github.rest.repos.listReleaseAssets({ owner, repo, release_id: releaseId })
            for (const a of assets) {
              if (a.name === assetName) {
                core.info(`Deleting existing asset ${a.name} (id=${a.id})`)
                await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: a.id })
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ steps.resolve-release.outputs.release_id }}

      - name: Upload exe to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.resolve-release.outputs.upload_url }}
          asset_path: ${{ steps.find-exe.outputs.exe_path }}
          asset_name: BootThatISO!.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
