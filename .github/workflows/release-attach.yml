name: Build, package and attach to Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to target when running manually'
        required: true
        default: 'v1.0.0'

jobs:
  build-package-and-upload:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Resolve target tag
        id: resolve-tag
        uses: actions/github-script@v6
        with:
          script: |
            let tag
            if (context.eventName === 'release') {
              tag = context.payload.release.tag_name
              console.log(`Target tag (event): ${tag}`)
            } else {
              tag = core.getInput('tag') || 'v1.0.0'
              console.log(`Target tag (manual): ${tag}`)
            }
            core.setOutput('tag', tag)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete existing release (if any)
        run: |
          gh release delete ${{ steps.resolve-tag.outputs.tag }} --yes || echo "Release does not exist or already deleted"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete and recreate tag
        run: |
          # Delete local tag
          git tag -d ${{ steps.resolve-tag.outputs.tag }} || echo "Local tag does not exist"
          # Delete remote tag
          git push origin :refs/tags/${{ steps.resolve-tag.outputs.tag }} || echo "Remote tag does not exist"
          # Create new tag at current commit
          git tag ${{ steps.resolve-tag.outputs.tag }}
          # Push new tag
          git push origin ${{ steps.resolve-tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure and build (CMake + MSBuild)
        run: |
          Write-Host "Configuring CMake and building Release..."
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
        shell: powershell

      - name: Locate built exe
        id: find-exe
        run: |
          $exe = Get-ChildItem -Path build -Filter 'BootThatISO*.exe' -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
          if ([string]::IsNullOrEmpty($exe)) {
            # fallback: try to find any exe in build/**/Release
            $exe = Get-ChildItem -Path build -Filter '*.exe' -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.FullName -match '\\Release\\' } | Select-Object -First 1 -ExpandProperty FullName
          }
          if (-not [string]::IsNullOrEmpty($exe)) {
            Write-Host "Found exe: $exe"
            Write-Output "exe_path=$exe" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            Write-Host "No exe found in build folder."
            exit 1
          }
        shell: powershell

      - name: Create release notes
        run: |
          echo "## Requisitos del Sistema" > release_notes.md
          echo "" >> release_notes.md
          echo "- Windows 10 u 11 de 64 bits con privilegios de administrador." >> release_notes.md
          echo "- Visual C++ Redistributable for Visual Studio 2022 (x64 o x86 según la arquitectura del sistema; descárgalos desde https://aka.ms/vs/17/release/vc_redist.x64.exe para x64 o https://aka.ms/vs/17/release/vc_redist.x86.exe para x86)." >> release_notes.md
          echo "- PowerShell, DiskPart, bcdedit y herramientas de linea de comandos de Windows disponibles en el sistema." >> release_notes.md
          echo "- Espacio libre minimo de 12 GB en la unidad C: para crear y formatear particiones." >> release_notes.md
          echo "" >> release_notes.md
          echo "![Screenshot](screenshot.png)" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Descarga" >> release_notes.md
          echo "Descarga el ejecutable desde los assets adjuntos." >> release_notes.md

      - name: Create Release
        run: gh release create ${{ steps.resolve-tag.outputs.tag }} --generate-notes --notes-file release_notes.md "${{ steps.find-exe.outputs.exe_path }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
